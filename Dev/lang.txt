PARSER TYPES:
statements          : NEWLINE statement (NEWLINE statement) NEWLINE
statement           : RETURN expr
                    : CONTINUE
                    : BREAK
                    : expr
expression          : KEYWORD:VAR IDENTIFIER EQ expression
                    : comp-expr (AND or OR) comp-expr
comp-expr           : NOT comp-expr
                    : arith-expr ((ANY COMPARISON OPERATOR)) arith-expr
arith-expr          : term (PLUS or MINUS) term
term                : factor (MUL or DIV) factor
factor              : PLUS or MINUS factor
                    : POW
power               : call POW factor
call                : atom (expr, expr)
atom                : INT or FLOAT or STRING or IDENTIFIER
                    : (expression)
                    : list-expr
                    : if-expr
                    : for-expr
                    : while-expr
                    : func-def
list-expr:          : [atom (expr, expr)]
if-expr             : IF expr THEN
                      (expr if-expr-b OR if-expr-c)
                    | (NEWLINE statements END if-expr-b OR if-expr-c)
if-expr-b           : ELIF expr THEN
                      (expr if-expr-b OR if-expr-c)
                    | (NEWLINE statements END if-expr-b OR if-expr-c)
if-expr-c           : ELSE
                      expr
                    | (NEWLINE statements END)
for-expr:           : FOR IDENTIFIER EQ expr UNTIL expr
                      (STEP expr) THEN expr
                      (NEWLINE statements END)
                    | (NEWLINE statements END)
while-expr:         : WHILE expr THEN
                      expr
                      (NEWLINE statements END)
func-def            :FUNC IDENTIFIER
                      (IDENTIFIER, IDENTIFIER)
                      (ARROW expr)
                     |(NEWLINE statements END)

VARIABLES:
  var      cool      =     n
   ^        ^        ^
Keyword Identifier Equals